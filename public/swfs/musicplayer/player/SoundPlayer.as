package player{	import flash.display.MovieClip;	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.utils.setTimeout;	import flash.events.ProgressEvent;	public class SoundPlayer	{		public var _target:MovieClip;		public var _loop:Boolean;		public var _shuffle:Boolean;		public var _mute:Boolean;		public var _volume:Number;				public var _sound:Sound;		public var _sc:SoundChannel;		public var _st:SoundTransform;		public var _slc:SoundLoaderContext;				public var _playIndex:Number;		public var _playlist:Array;		public var _shuffleSortList:Array;				public var _paused:Boolean;		public var _loaded:Boolean;		public var _position:Number;				public var _loadProgressId:Number;		public var _playProgressId:Number;				public var onChange:Function;		public var onLoadProgress:Function;		public var onPlayProgress:Function;		public var playTimer:Timer;		public var loadTimer:Timer;				public function SoundPlayer()		{						_playIndex = -1;			_paused = false;			_loaded = false;						_st = new SoundTransform();			_slc = new SoundLoaderContext(1000, true);						_playlist = [];			_shuffleSortList = [];			_loop = true;			_shuffle = false;			_volume = 1;			_mute = false;									// _loadProgressId = setInterval(function(){checkLoadProgress()}, 100, this);			// _playProgressId = setInterval(function() {checkPlayProgress()}, 100, this);				playTimer = new Timer(100);			playTimer.addEventListener(TimerEvent.TIMER, checkPlayProgress);			playTimer.start();						loadTimer = new Timer(100);			loadTimer.addEventListener(TimerEvent.TIMER, checkLoadProgress);			loadTimer.start();		}				public function get loop():*		{			return _loop;		}		public function set loop(val:*):void		{			_loop = val;		}		public function get shuffle():*		{			return _shuffle;		}		public function set shuffle(val:*):void		{			_shuffle = val;		}			public function get mute():Boolean		{			return _mute;		}		public function set mute(val:Boolean):void		{			_mute = val;			_st.volume = _volume * int(!_mute);			if (_sc)				_sc.soundTransform = _st;		}		public function get volume():Number		{							return _volume;		}		public function set volume(val:Number)		{			_volume = val;			_st.volume = _volume * int(!_mute);			if (_sc)				_sc.soundTransform = _st;		}		public function get paused():Boolean		{			return _paused;		}		public function set playlist(val:Array):void		{			_playIndex = -1;			_playlist = val;						_shuffleSortList = [];			for (var i=0; i< _playlist.length; i++)			{				var index = Math.floor((_shuffleSortList.length + 1) * Math.random());				_shuffleSortList.splice(index, 0, i);			}						next();		}		public function get playlist():Array		{			return _playlist;		}		public function set playIndex(val:int):void		{			trace("set playIndex " + val.toString());			_playIndex = val;			_position = 0;						trace("if sc");			if (_sc)				_sc.stop();						_sound = new Sound();						var req:URLRequest = new URLRequest(_playlist[_playIndex].url);			_sound.addEventListener(ProgressEvent.PROGRESS, onSoundProgress);			_sound.load(req, _slc);			trace("loading sound");			_st.volume = _volume * int(!_mute);						_loaded = false;						onChange(_playIndex);		}				private function onSoundProgress(evt:ProgressEvent):void		{			trace("bytesTotal: " + _sound.bytesTotal.toString());		}				public function get playIndex():int		{			return _playIndex;		}		public function set position(val:Number):void		{			paused ? pauseSound(val) : playSound(val);		}		public function get position():Number		{			return _position;		}		public function get soundInfo():Object		{			trace ("get soundInfo: " + _playlist[_playIndex].toString());			return _playlist[_playIndex];		}		public function get duration():Number		{			trace("sound length: " + _sound.bytesTotal.toString());			if(isNaN(_sound.length))				return 0;			else if(isNaN(_sound.bytesLoaded) || _sound.bytesLoaded == 0)				return 0;			else if(isNaN(_sound.bytesTotal) || _sound.bytesTotal == 0)				return 0;			else				return _sound.length/_sound.bytesLoaded * _sound.bytesTotal;		}		public function get bytesLoaded():Number		{			return _sound.bytesLoaded;		}		public function get bytesTotal():Number		{			return _sound.bytesTotal;		}		public function get loaded():Boolean		{			return _loaded;		}		public function checkLoadProgress(evt:TimerEvent):void		{					if (bytesTotal > 0 && _loaded == false)			{				if (bytesTotal != 0 && bytesLoaded == bytesTotal)				{					_loaded = true;				}				onLoadProgress(bytesLoaded, bytesTotal);			}		}		public function checkPlayProgress(evt:TimerEvent):void		{			if (paused == false)			{				_position = isNaN(_sc.position) ? 0:_sc.position;				onPlayProgress(_position);			}		}		public function playSound(val:Number=0):void 		{			if (val)				_position = val;											_sc = _sound.play(_position, 1, _st);			_paused = false;						_sc.addEventListener(Event.SOUND_COMPLETE, function() 			{				var currentIndex;				if (_shuffle)				{					currentIndex = -1;					for (var i = 0; i < _shuffleSortList.length; i++) 					{						if(_playIndex == _shuffleSortList[i])						{							currentIndex = i;							break;						}					}				} 				else				{					currentIndex = _playIndex;				}								if (currentIndex < _playlist.length - 1)				{					next();				}				else				{					if (_loop) 						next();					else 						pauseSound();				}			});					}		public function pauseSound(val:Number=0):void		{			if (val)				_position = val;			else if (_sc)			{				_position = _sc.position;			}			if (_sc)				_sc.stop();			_paused = true;		}		public function stopSound():void		{			_position = 0;			_sc.stop();			_paused = true;		}		public function next()		{			if(_playlist.length > 0)			{				var nextIndex;				var currentIndex;								if(_shuffle)				{					currentIndex = -1;					for (var i = 0; i < _shuffleSortList.length; i++) 					{						if(_playIndex == _shuffleSortList[i])						{							currentIndex = i;							break;						}					}					nextIndex = (currentIndex+1)%_playlist.length;					nextIndex = _shuffleSortList[nextIndex];				}				else				{					currentIndex = _playIndex;					nextIndex = (currentIndex+1)%_playlist.length;				}								_playIndex = nextIndex;			}		}		public function prev()		{			if(_playlist.length > 0)			{				var prevIndex;				var currentIndex;								if(_shuffle){					currentIndex = -1;					for (var i = 0; i < _shuffleSortList.length; i++) 					{						if(_playIndex == _shuffleSortList[i])						{							currentIndex = i;							break;						}					}					prevIndex = currentIndex-1;					if(prevIndex < 0)					{						prevIndex += _playlist.length;					}					prevIndex = _shuffleSortList[prevIndex];				}				else				{					currentIndex = _playIndex;					prevIndex = currentIndex-1;					if(prevIndex < 0)					{						prevIndex += _playlist.length;					}				}								_playIndex = prevIndex;			}		}				}}