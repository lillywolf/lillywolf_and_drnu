package helpers{	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;		// import mx.events.DynamicEvent;		public class PlayerButton extends MovieClip	{		public var items_array:Array = [];		public var _type:int;		public var _status:String;		public var _selectable:Boolean;		public var _selected:Boolean;		public var _groupName:String;		public var _group:PlayerButtonGroup;		public var _dataObj:Object;		public var frame_obj:Object;		public var _targetFrame:int;		public var _targetLabel:String;		public var _index:int;		public var eventsLabel_array:Array = ["over", "overed", "down", "out", "outed"];						public function PlayerButton()		{			super();						stop();						items_array.push(this);			_selected = false;			_selectable = false;						initFrameObj();			_dataObj = {};			_type = frame_obj.outed == 1 ? 1 : 2;			initEvent();					}		public function initEvent():void		{			var target:MovieClip = this;			var event_mc:MovieClip = this;						event_mc.useHandCursor = false;			event_mc.addEventListener(MouseEvent.ROLL_OVER, function (e:MouseEvent)			{				if (!selected) 				{					status = "rollOver";				}//				if (e) //				{//					target.dispatchEvent({target: target, type: "rollOver"});//				}			});			event_mc.addEventListener(MouseEvent.ROLL_OUT, function (e:MouseEvent) 			{				if (selectable)				{					if (!selected)					{						status = "rollOut";					}				}				else				{					status = "rollOut";				}							//				if (e) //				{//					target.dispatchEvent({target: target, type: "rollOut"});//				}			});			event_mc.addEventListener(MouseEvent.MOUSE_DOWN, function (e:MouseEvent) 			{				if (selectable == true) 				{					selected = !selected;				}				else				{												status = "press";				}								if (e) 				{					if (selectable)					{						// target.dispatchEvent(new DynamicEvent("change"));					}					// target.dispatchEvent(new DynamicEvent("press"));				}			});			event_mc.addEventListener(MouseEvent.MOUSE_UP, function (e:MouseEvent) 			{				if (selected != true) 				{					status = "release";				}				//				if (e) //				{//					target.dispatchEvent({target: target, type: "release"});//				}			});		}				public function getFrameByLabel(label_str:String):int		{			var recordFrame:int = currentFrame;			gotoAndStop(label_str);			var frame:int = currentFrame;			gotoAndStop(recordFrame);			return frame;		}				public function initFrameObj():void 		{			frame_obj = {};			for (var i = 0; i < eventsLabel_array.length; i++) 			{				var event_label = eventsLabel_array[i];				var frame = getFrameByLabel(event_label);				frame_obj[event_label] = frame;			}		}		/*private function onEnterFrame(evt:Event):void		{			if (currentFrame > _targetFrame) 			{				prevFrame();			} 			else if (currentFrame < _targetFrame) 			{				nextFrame();			}			if (currentFrame == _targetFrame) 			{				removeEventListener(Event.ENTER_FRAME, onEnterFrame);			}					}*/		function playtoLabel(label_str:String):void 		{			_targetFrame = getFrameByLabel(label_str);			_targetLabel = label_str;						if (_selected && this is Mp3PlayerPlaylistItem)			{				trace("target: " + _targetFrame.toString());				trace("current: " + currentFrame.toString());								trace("type: " + _type.toString());			}			addEventListener(Event.ENTER_FRAME, onFrameEntered);						gotoAndPlay(currentFrame);		}		private function onFrameEntered(evt:Event):void		{			if (_selected && this is Mp3PlayerPlaylistItem)				trace("current frame at " + currentFrame.toString());						if (currentFrame == _targetFrame)			{				stop();				removeEventListener(Event.ENTER_FRAME, onFrameEntered);				if (_selected && this is Mp3PlayerPlaylistItem)					trace("stopped at " + _targetFrame.toString());			}		}		public function set selected(value:Boolean) 		{			if (value == false)				trace("selected is false");						if (_selectable == false) 				return;							_selected = value;			status = value ? "press" : "rollOut";		}		public function get selected():Boolean 		{			return _selected;		}				public function set selectable(value:Boolean):void 		{			_selectable = value;		}		public function get selectable():Boolean 		{			return _selectable;		}		public function set status(status_str:String) 		{			_status = status_str;						if (selected)				trace("status: " + _status);						removeEventListener(Event.ENTER_FRAME, onFrameEntered);						switch (_type) 			{				case 1 :					switch (_status) 					{						case "rollOver" :							playtoLabel("overed");							break;						case "rollOut" :							playtoLabel("over");							break;						case "press" :							playtoLabel("down");							break;						case "release" :							playtoLabel("overed");							break;						default :							break;					}					break;				case 2 :					switch (_status) 					{						case "rollOver" :							gotoAndStop("over");							playtoLabel("overed");							break;						case "rollOut" :							gotoAndStop("out");							playtoLabel("outed");							break;						case "press" :							gotoAndStop("overed");							playtoLabel("down");							break;						case "release" :							playtoLabel("overed");							break;						default :							break;					}					break;				default :					break;			}		}		public function get status():String		{			return _status;		}		public function set groupName(value:String):void		{			if(_groupName)			{				_group.removeItem(this);			}			_group = PlayerButtonGroup.getGroup(value) ? PlayerButtonGroup.getGroup(value) : new PlayerButtonGroup(value);			_group.addItem(this);			_groupName = value;		}		public function get groupName():String		{			return _groupName;		}		public function set group(value:PlayerButtonGroup):void 		{			if(_groupName)			{				_group.removeItem(this);			}			value.addItem(this);		}		public function get group():PlayerButtonGroup		{			return _group;		}				public function set type(value:int):void 		{			_type = value;		}		public function get type():int 		{			return _type;		}		public function set data(value):void		{			_dataObj = value;		}		public function get data():Object		{			return _dataObj;		}				public function set index(val:int):void		{			_index = val;		}		public function get index():int		{			return _index;		}	}}