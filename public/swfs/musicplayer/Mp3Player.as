package {	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.Sound;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.utils.getTimer;	import player.SoundPlayer;		import helpers.TimeFormatter;	import flash.geom.Point;	import helpers.PlayerButtonGroup;	import flash.utils.setTimeout;	import flash.system.Security;		// import mx.charts.AreaChart;	// import mx.graphics.shaderClasses.ColorBurnShader;		public class Mp3Player extends MovieClip	{		public var _init:Boolean;		public var _mode:String;		public var _configUrl:String;		public var _config_xml:XML;		public var _soundPlayer:SoundPlayer;		public var _title_txt:TextField;		public var _status_txt:TextField;		public var _progress:Mp3PlayerProgress;		public var _img:MovieClip;		public var _soundWaves:SoundWaves;		public var _playBtn:Mp3PlayerPlayBtn;		public var _nextBtn:Mp3PlayePrevBtn;		public var _prevBtn:Mp3PlayerNextBtn;		public var _volumeBtn:Mp3PlayerVolumeBtn;		public var _muteBtn:Mp3PlayerMuteBtn;		public var _loopBtn:Mp3PlayerLoopBtn;		public var _shuffleBtn:Mp3PlayerShuffleBtn;		public var _playlist:Mp3PlayerPlaylist;		public var _playlistItemSpace:Number;		public var _playlistOpenSpeed:Number;		public var _playlistScrollSpeed:Number;		public var _playlistItemGroupName:String;		public var _playlistItemGroup:PlayerButtonGroup;		public var _bg:MovieClip;		public var _outLight:MovieClip;		public var _inLight:MovieClip;		public var _light:MovieClip;		public var _shadow:MovieClip;		public var _autoPlay:Boolean;		public var _menuMode:String;		public var _openMenu:Boolean;		public var _allowDoubleClickToSwitchMode:Boolean;		public var _allowDrag:Boolean;		public var _backgroundAlpha:Number;		public var _backgroundColor:uint;		public var _loop:Boolean;		public var _shuffle:Boolean;		public var _volume:Number;		public var _mute:Boolean;		public var _target:Mp3Player;		public var onChange:Function;		public var onLoadProgress:Function;		public var onPlayProgress:Function;		public var onInit:Function;				public var playlistItems:Array;		public function Mp3Player()		{			super();						Security.allowDomain("*");			Security.allowInsecureDomain("*");			Security.loadPolicyFile("http://lillywolfanddrnu.appspot.com/crossdomain.xml");						_target = this as Mp3Player;						_init = false;			_autoPlay = false;			_mode = "normal";			_openMenu = true;			_menuMode = "normal";			_allowDoubleClickToSwitchMode = true;			_allowDrag = true;			_loop = true;			_shuffle = false;			_volume = 1;			_mute = false;			_backgroundColor = 0x000000;			_backgroundAlpha = 100;						playlistItems = [];						this.mouseChildren = true;			this.mouseEnabled = false;						//create xml for load config file			_config_xml = new XML();			_soundPlayer = new SoundPlayer();			//onChange refresh title and cover img			_soundPlayer.onChange = function (playIndex:int)			{				_title_txt.text = _soundPlayer.soundInfo.title;				var loader:Loader = new Loader();				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onCoverLoadComplete);				var req:URLRequest = new URLRequest(_soundPlayer.soundInfo.cover);				loader.load(req);				_playlistItemGroup.selectedIndex = playIndex;				(_progress.play_mc as MovieClip).scaleX = 0;				_status_txt.text = "";				// onChange(playIndex);			};			function onCoverLoadComplete(evt:Event):void			{				var bitmapData:BitmapData = Bitmap(LoaderInfo(evt.target).content).bitmapData;				var bp:Bitmap = new Bitmap(bitmapData);				_img.addChild(bp);			}			//onLoadProgress refresh loadProgress			_soundPlayer.onLoadProgress = function(bytesLoaded:Number, bytesTotal:Number) 			{				(_progress.load_mc as MovieClip).scaleX = bytesLoaded/bytesTotal;			};			//onPlayProgress refresh playProgress			_soundPlayer.onPlayProgress = function(position:Number) 			{				var duration_percent:Number = _target.position/_target.duration;				(_progress.play_mc as MovieClip).scaleX = duration_percent;				_status_txt.text = timeFormat(Math.ceil(_target.position/1000)) + " / " + timeFormat(Math.ceil(_target.duration/1000));			};									init();			parseConfig();		}		public function init():void		{			if (_init) 				return;						_init = true;						//soundWaves			// _soundWaves.setSize(56, 11);			// _soundWaves.numItems = 15;			// _soundWaves.space = 2;						_light.mouseChildren = false;			_light.mouseEnabled = false;			_nextBtn.stop();			_prevBtn.stop();						//__playBtn			_playBtn.imgBtn.mouseEnabled = true;			_playBtn.imgBtn.selectable = true;			_playBtn.useHandCursor = true;			_playBtn.addEventListener(MouseEvent.CLICK, function onPlayBtnClick (e:MouseEvent):void 			{				_target.paused ? _target.playSound() : _target.pauseSound();			});						//__prevBtn			_prevBtn.mouseEnabled = true;			_prevBtn.useHandCursor = true;			_prevBtn.addEventListener(MouseEvent.CLICK, function onPrevBtnClick (e:MouseEvent):void 			{				_target.prev();			});						//__nextBtn			_nextBtn.mouseEnabled = true;			_nextBtn.useHandCursor = true;			_nextBtn.addEventListener(MouseEvent.CLICK, function onNextBtnClick (e:MouseEvent):void 			{				_target.next();			});						//__loopBtn			_loopBtn.imgBtn.selectable = true;			_loopBtn.useHandCursor = true;			_loopBtn.addEventListener(MouseEvent.CLICK, function () 			{				_target.loop = !_target.loop;			});						//__shuffleBtn			_shuffleBtn.imgBtn.selectable = true;			_shuffleBtn.useHandCursor = true;			_shuffleBtn.addEventListener(MouseEvent.CLICK, function () 			{				_target.shuffle = !_target.shuffle;			});						//__muteBtn			_muteBtn.imgBtn.selectable = true;			_muteBtn.useHandCursor = true;			_muteBtn.addEventListener(MouseEvent.CLICK, function () 			{				_target.mute = !_target.mute;			});						//__progress					_progress.useHandCursor = true;						_progress.addEventListener(MouseEvent.MOUSE_DOWN, function() 			{				if (!_progress.clicked)				{					_progress.paused = _soundPlayer.paused;					_progress.clicked = true;					_soundPlayer.pauseSound();					progressMouseMove();					_target.addEventListener(MouseEvent.MOUSE_MOVE, onProgressMouseMove);					_target.stage.addEventListener(MouseEvent.MOUSE_UP, onProgressMouseUp);									}			});			/* _progress.addEventListener(MouseEvent.MOUSE_UP, function() 			{				resetProgressBar();			}); */											//volumeBtn			_volumeBtn.useHandCursor = true;			_volumeBtn.addEventListener(MouseEvent.MOUSE_DOWN, function () 			{				_target.addEventListener(MouseEvent.MOUSE_MOVE, onVolumeMouseMove);				_target.stage.addEventListener(MouseEvent.MOUSE_UP, onVolumeMouseUp);			});						_volumeBtn.addEventListener(MouseEvent.MOUSE_UP, function () 			{				removeEventListener(MouseEvent.MOUSE_MOVE, onVolumeMouseMove);			});						//playlist			_playlist.mask_mc.scaleY = 0;			// _playlist.mask_mc.mouseChildren = false;			_playlist.mask_mc.mouseEnabled = false;			_playlistItemSpace = 2;			_playlistOpenSpeed = .3;			_playlistScrollSpeed = .07;			_playlist.content_mc.mask = _playlist.mask_mc;			_playlist.switchBtn.stop();			_playlist.switchBtn.addEventListener(MouseEvent.ROLL_OVER, function() 			{				if (menuMode == "auto") 				{					_target.openMenu = true;				}			});			_playlist.switchBtn.addEventListener(MouseEvent.CLICK, function() 			{				if (menuMode == "normal") 				{					_target.openMenu = !_target.openMenu;				}			});			_playlist.addEventListener(Event.ENTER_FRAME, function() 			{				var posObj:Object;				if (menuMode == "auto") 				{					posObj = {x: _playlist.mouseX, y: _playlist.mouseY};					_playlist.localToGlobal(new Point(posObj.x, posObj.y));					if (!_playlist.bg.hitTestPoint(posObj.x, posObj.y, true)) 					{						openMenu = false;					}				}				var space = 20;				var space2 = 5;				var k1 = _playlistScrollSpeed;				var k2 = _playlistOpenSpeed;				var pos = (_playlist.mask_mc.mouseY + (_playlist.mask_mc.mouseY > _playlist.mask_mc.height/2 ? 1 : -1) * space/2)/ _playlist.mask_mc.height;				posObj = { x: _playlist.mouseX, y: _playlist.mouseY};				_playlist.localToGlobal(new Point(posObj.x, posObj.y));				if (!_playlist.bg.hitTestPoint(posObj.x, posObj.y, true) && _target.playIndex != -1) 				{					pos = (_target.playIndex)/(_target.playlist.length - 1);				}				if (pos < 0) 				{					pos = 0;				} 				else if (pos > 1) 				{					pos = 1;				}				if (_playlist.content_mc.height > _playlist.mask_mc.height / _playlist.mask_mc.scaleY) 				{					var targetY:Number = -pos * (_playlist.content_mc.height - _playlist.mask_mc.height) + _playlist.mask_mc.y;					_playlist.content_mc.y += (targetY - _playlist.content_mc.y) * k1 * (_target.openMenu ? 1 : .2);				}				var targetYscale:Number = int(_target.openMenu);				_playlist.hitAreaPlaylist.scaleY += (targetYscale - _playlist.hitAreaPlaylist.scaleY) * k2;				_playlist.switchBtn.y = _playlist.hitAreaPlaylist.height;				_playlist.mask_mc.y = space2;				_playlist.mask_mc.height = _playlist.hitAreaPlaylist.height - space2 * 2;				_playlist.content_mc.visible = _playlist.mask_mc.height > 1;				_playlist.bg.height = _playlist.hitAreaPlaylist.height + 40;			});							//__bg			_bg.useHandCursor = false;			_bg.addEventListener(MouseEvent.MOUSE_DOWN, function() 			{				if (_target.allowDrag) 				{					trace("alpha: " + _bg.alpha.toString());					_bg.alpha = 75 * _target.backgroundAlpha/100;					_target.startDrag();				}				if (_target.allowDoubleClickToSwitchMode) 				{					var now = getTimer();					if (now - _bg.time < 500) {						_target.mode = _target.mode == "normal" ? "lite" : "normal";						_bg.time = 0;					} 					else 					{						_bg.time = now;					}				}			});			_bg.addEventListener(MouseEvent.MOUSE_UP, function () 			{				_bg.alpha = 100 * _target.backgroundAlpha/100;				_target.stopDrag();			});			loop = loop;			shuffle = shuffle;			var m = mute;			volume = volume;			mute = m;			sortPlaylist();		}		private function progressMouseMove():void		{			var t:Number = _progress.mouseX/(_progress.width/_progress.scaleX);			if (t > (_soundPlayer.bytesLoaded/_soundPlayer.bytesTotal)) 			{				t = (_soundPlayer.bytesLoaded/_soundPlayer.bytesTotal);			} 			else if (t < 0) 			{				t = 0;			}			_soundPlayer.pauseSound(t * _soundPlayer.duration);			var duration_percent = (_soundPlayer.position/_soundPlayer.duration);			_progress.play_mc.scaleX = duration_percent;			_status_txt.text = timeFormat(Math.ceil(_soundPlayer.position/1000)) + " / " + timeFormat(Math.ceil(_soundPlayer.duration/1000));					}		private function resetProgressBar():void		{			_progress.clicked = false;			_target.removeEventListener(MouseEvent.MOUSE_MOVE, onProgressMouseMove);			_target.stage.removeEventListener(MouseEvent.MOUSE_UP, onProgressMouseUp);				if (!_progress.paused)			{				_soundPlayer.playSound();			}					}		private function onProgressMouseMove(evt:MouseEvent):void		{			progressMouseMove();		}		private function onProgressMouseUp(evt:MouseEvent):void		{			resetProgressBar();		}			private function onVolumeMouseUp(evt:MouseEvent):void		{			_target.removeEventListener(MouseEvent.MOUSE_MOVE, onVolumeMouseMove);			_target.stage.removeEventListener(MouseEvent.MOUSE_UP, onVolumeMouseUp);						}		private function onVolumeMouseMove(evt:MouseEvent):void		{			var v = (_volumeBtn.value.mouseX)/_volumeBtn.value.width;			if (v > 1) {				v = 1;			} 			else if (v < 0) 			{				v = 0;			}			volume = v;		}		//createPlaylist		private function createPlaylist(playlist_array:Array):void 		{			var item:Mp3PlayerPlaylistItem;			while (playlistItems.length > 1) {				item = playlistItems.pop();				item.parent.removeChild(item);			}			_playlistItemGroupName = String("gname"+getTimer());			playlistItems = [];			for (var i = 0; i < playlist_array.length; i++) 			{				var soundInfo:Object = playlist_array[i];				item = new Mp3PlayerPlaylistItem();				_playlist.content_mc.addChild(item);				item.groupName = _playlistItemGroupName;				item.index = i;				item.title.text = soundInfo.title;				item.y = i * (_playlistItemSpace + item.height);				item.selectable = true;				playlistItems.push(item);								item.addEventListener(MouseEvent.MOUSE_DOWN, function (evt:MouseEvent)				{					trace("play the frikking song:");					_target.playIndex = evt.currentTarget.index;					_target.playSound();				});			}			_playlistItemGroup = item.group;									}		//sortPlaylist		private function sortPlaylist():void		{			for (var i = 0; i < playlistItems.length; i++) 			{				var item = playlistItems[i];				item.y = i * (_playlistItemSpace + item.height);			}		}		//load config file		public function loadConfig(url:String):void 		{			_configUrl = url;//			_config_xml.load(_configUrl);		}		//format time		private function timeFormat(time:Number):String		{			var numSec:Number = time%60;			var numMin:Number = (time-numSec)/60;			return (numMin > 9  ? numMin : "0" + numMin) + ":" + (numSec > 9 ? numSec : "0" + numSec);		}		//parsing config file and setting property		private function parseConfig():void 		{//			var target = this;//			var rootNode = __config_xml.firstChild;			var playlist_array = [{title: "The Devil You Know", url: "files/the_devil_you_know.mp3", cover: "files/cover1.png"},								  {title: "Everybody On Your Block", url: "files/everybody_on_your_block.mp3", cover: "files/cover2.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"},								  {title: "Test", url: "http://lillywolfanddrnu.appspot.com/swf/files/test1.mp3", cover: "files/cover3.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"},								  {title: "Love Too Serious", url: "files/love_too_serious.mp3", cover: "files/cover3.png"}];//			for (var i = 0; i<rootNode.childNodes.length; i++) {//				var dataObj = {};//				var audioNode = rootNode.childNodes[i];//				for (var attr in audioNode.attributes) {//					dataObj[attr] = audioNode.attributes[attr];//				}//				playlist_array.push(dataObj);//			}//			autoPlay = rootNode.attributes.autoPlay == "true";//			menuMode = rootNode.attributes.menuMode.toString().toLowerCase();//			openMenu = rootNode.attributes.openMenu.toString().toLowerCase() == "true";//			mode = rootNode.attributes.mode.toString().toLowerCase() == "lite" ? "lite" : "normal";//			allowDrag = rootNode.attributes.allowDrag.toString().toLowerCase() == "true";//			allowDoubleClickToSwitchMode = rootNode.attributes.allowDoubleClickToSwitchMode.toString().toLowerCase() == "true";//			mute = rootNode.attributes.mute.toString().toLowerCase() == "true";//			backgroundColor = parseInt(rootNode.attributes.backgroundColor);//			backgroundAlpha = parseInt(rootNode.attributes.backgroundAlpha);//			loop = rootNode.attributes.loop.toString().toLowerCase() == "true";//			shuffle = rootNode.attributes.shuffle.toString().toLowerCase() == "true";//			volume = parseInt(rootNode.attributes.volume);//			mute = rootNode.attributes.mute.toString().toLowerCase() == "true";			playlist = playlist_array;		}		function set autoPlay(value:Boolean):void 		{			_autoPlay = value;		}		function get autoPlay():Boolean		{			return _autoPlay;		}		function set playlist(value:Array) 		{			createPlaylist(value);			_soundPlayer.playlist = value;			trace("set playlist on soundplayer");			_soundPlayer.playIndex = 0;			autoPlay ? playSound() : pauseSound();		}		function get playlist():Array		{			return _soundPlayer.playlist;		}		function set loop(value:Boolean):void 		{			_soundPlayer.loop = value;			if (_init) 			{				_loopBtn.imgBtn.selected = _soundPlayer.loop;			}		}		function get loop():Boolean 		{			return _soundPlayer.loop;		}		function get shuffle():Boolean 		{			return _soundPlayer.shuffle;		}		function set shuffle(value:Boolean):void 		{			_soundPlayer.shuffle = value;			if (_init) 			{				_shuffleBtn.imgBtn.selected = _soundPlayer.shuffle;			}		}		function set mute(value:Boolean):void		{			_soundPlayer.mute = value;			if (_init) 			{				_muteBtn.imgBtn.selected = _soundPlayer.mute;			}		}		function get mute():Boolean		{			return _soundPlayer.mute;		}		function set volume(value:Number):void 		{			mute = false;			_soundPlayer.volume = value;			_volumeBtn.value.mask_mc.scaleX = value;		}		function get volume():Number 		{			return _soundPlayer.volume;		}		function set playIndex(value:int):void 		{			_soundPlayer.playIndex = value;		}		function get playIndex():int 		{			return _soundPlayer.playIndex;		}		function pauseSound(value:Number=0):void 		{			_soundPlayer.pauseSound(value);			_playBtn.imgBtn.selected = false;			// _soundWaves.stop();		}		function playSound(value:Number=0):void 		{			_soundPlayer.playSound(value);			_playBtn.imgBtn.selected = true;			// _soundWaves.play();		}		function get paused():Boolean 		{			return _soundPlayer.paused;		}		function next():void 		{			_soundPlayer.next();			playSound();		}		function prev():void 		{			_soundPlayer.prev();			playSound();		}		function set position(value:Number):void 		{			_soundPlayer.position = value;		}		function get position():Number 		{			return _soundPlayer.position;		}		function get duration():Number 		{			return _soundPlayer.duration;		}		// function get soundInfo():Array 		// {			// return soundInfo._soundPlayer;		// }		function set mode(value:String):void 		{			_mode = value == "lite" ? "lite" : "normal";			switch (_mode) {//				case "lite" ://					__soundWaves._visible = true;//					__img._x = 4;//					__img._y = 4;//					__img._width = 36;//					__img._height = 36;//					//effect//					__outLight._width = 105;//					__inLight._width = 105;//					__bg._width = 105;//					__light._width = 105;//					__shadow._width = 105;//					__outLight._height = 44;//					__inLight._height = 44;//					__bg._height = 44;//					__light._height = 44;//					__shadow._height = 44;//					//ui//					__playBtn._x = 43;//					__playBtn._y = 22;//					__prevBtn._x = 63;//					__prevBtn._y = 22;//					__nextBtn._x = 83;//					__nextBtn._y = 22;//					__progress._x = 43;//					__progress._y = 17;//					__progress._width = 58;//					__volumeBtn._visible = false;//					__muteBtn._visible = false;//					__loopBtn._visible = false;//					__playlist._visible = false;//					__shuffleBtn._visible = false;//					//info//					__title_txt._visible = false;//					__status_txt._visible = false;//					break;				case "normal" ://					__soundWaves._visible = false;					_img.x = 6;					_img.y = 6;					_img.width = 48;					_img.height = 48;					//effect					_outLight.width = 300;					_inLight.width = 300;					_bg.width = 300;					_light.width = 300;					_shadow.width = 300;					_outLight.height = 60;					_inLight.height = 60;					_bg.height = 60;					_light.height = 60;					_shadow.height = 60;//					//ui//					__playBtn._x = 60;//					__playBtn._y = 37;//					__prevBtn._x = 80;//					__prevBtn._y = 37;//					__nextBtn._x = 100;//					__nextBtn._y = 37;//					__progress._x = 60;//					__progress._y = 25;//					__progress._xscale = 100;//					__shuffleBtn._visible = true;//					__volumeBtn._visible = true;//					__muteBtn._visible = true;//					__loopBtn._visible = true;//					__playlist._visible = true;//					//info					_title_txt.visible = true;					_status_txt.visible = true;			}		}		function get mode():String 		{			return _mode;		}		function set openMenu(value:Boolean):void 		{			_openMenu = value;			_playlist.switchBtn.gotoAndStop(1 + 1 * int(value));		}		function get openMenu():Boolean 		{			return _openMenu;		}		function set menuMode(value:String) 		{			switch (value) {				case "show" :					_menuMode = "show";					_playlist.switchBtn.useHandCursor = false;					openMenu = true;					break;				case "hide" :					_menuMode = "hide";					_playlist.switchBtn.useHandCursor = false;					openMenu = false;					break;				case "normal" :					_menuMode = "normal";					_playlist.switchBtn.useHandCursor = true;					break;				case "auto" :					_menuMode = "auto";					_playlist.switchBtn.useHandCursor = false;					break;			}		}		function get menuMode():String 		{			return _menuMode;		}		function set allowDoubleClickToSwitchMode(value:Boolean):void 		{			_allowDoubleClickToSwitchMode = value;		}		function get allowDoubleClickToSwitchMode():Boolean 		{			return _allowDoubleClickToSwitchMode;		}		function set allowDrag(value:Boolean):void 		{			_allowDrag = value;		}		function get allowDrag():Boolean 		{			return _allowDrag;		}		function set backgroundAlpha(value:Number):void 		{			_backgroundAlpha = value;			_bg.alpha = backgroundAlpha;		}		function get backgroundAlpha():Number 		{			return _backgroundAlpha;		}		function set backgroundColor(value:uint):void 		{			_backgroundColor = value;//			var c = new Color(_bg);//			c.setRGB(value);		}		function get backgroundColor():uint 		{			return _backgroundColor;		}			}}